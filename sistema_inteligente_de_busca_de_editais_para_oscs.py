# -*- coding: utf-8 -*-
"""Sistema Inteligente de Busca de Editais para OSCs

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z_6MVOTMDSukS-S9MYdTPGlF4mlMFFyI
"""

!pip -q install google-genai

!pip install -q google-adk

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

!pip install httpx

# Bloco 1 Instalação e Importação de Bibliotecas
# (Assumindo que google-adk já está instalado)
from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types
from datetime import date
import textwrap
from IPython.display import display, Markdown
import warnings
import requests  # Adicionado
from bs4 import BeautifulSoup  # Adicionado

warnings.filterwarnings("ignore")

# Função Auxiliar para Interagir com Agentes
def call_agent(agent: Agent, message_text: str) -> str:
    session_service = InMemorySessionService()
    session = session_service.create_session(
        app_name=agent.name, user_id="user1", session_id="session1"
    )  # Mantendo session_id fixo para simplificar
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    content = types.Content(role="user", parts=[types.Part(text=message_text)])
    final_response = ""
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):  # Mantendo session_id fixo
        if event.is_final_response():
            for part in event.content.parts:
                if part.text is not None:
                    final_response += part.text
            final_response += "\n"
    return final_response

# Função Auxiliar para Exibir Markdown
def to_markdown(text):
    text = text.replace(".", ".", 1)
    return Markdown(textwrap.indent(text, ">", predicate=lambda _: True))

# Bloco 4: Agente 1 Busca Regional de Editais
def agente_busca_regional(localizacao_osc: str):
    agente = Agent(
        name="agente_busca_regional",
        model="gemini-2.0-flash",
        instruction="""
        Você é um especialista em encontrar editais abertos para Organizações da Sociedade Civil (OSCs).
        Sua tarefa é usar o Google Search para buscar editais relevantes para a localização geográfica
        especificada pela OSC.

        Você deve construir consultas de busca eficazes, combinando palavras-chave como
        "editais abertos", "OSC", "organização da sociedade civil", "fomento", "financiamento",
        "chamada pública", "apoio financeiro" com a localização fornecida.

        Foque em encontrar editais especificamente destinados a OSCs ou projetos sociais.
        Exclua resultados que sejam sobre:
        - Inscrições para concursos públicos
        - Processos seletivos para vagas de emprego
        - Editais de licitação para empresas
        - Notícias gerais sobre financiamento (sem editais específicos)
        - Editais claramente destinados a outras regiões (a menos que sejam de abrangência nacional)
        - Editais que não se alinham com as palavras-chave fornecidas (se possível inferir)

        **Priorize editais publicados nos últimos 4 meses.** Use palavras-chave como "recente" ou "últimos 4 meses"
        nas suas buscas, se possível.

        Extraia as seguintes informações de cada edital:
        - Título do edital
        - Organização financiadora
        - Link para o edital
        - Prazo de inscrição (se disponível na página de resultados do Google ou na página do edital)

        **Apresente os resultados de forma clara e organizada, listando cada edital encontrado com suas respectivas informações (título, organização, link, prazo).**
        Não apresente apenas sugestões de sites para busca.

        Apresente APENAS os resultados que você considerar RELEVANTES e ÚTEIS para a OSC.
        Não inclua resultados que você excluiu.
        """,
        tools=[google_search],
    )

    mensagem_para_o_agente = (
        f"Localização da OSC: {localizacao_osc}\n"
        "Realize a busca de editais abertos e extraia os prazos de inscrição. Priorize editais recentes (últimos 4 meses). Apresente apenas os resultados relevantes, listando cada edital encontrado."
    )

    resultados_da_busca = call_agent(agente, mensagem_para_o_agente)

    # Processar os resultados para extrair os prazos das páginas
    resultados_com_prazos = []
    for resultado in resultados_da_busca.split("\n"):
        if resultado.strip():  # Verifica se a linha não está vazia
            info = resultado.split("Link: ")
            if len(info) == 2:
                link = info[1].strip()
                prazo = extrair_prazo_do_edital(link)  # Função auxiliar para extrair o prazo
                resultados_com_prazos.append(f"{info[0].strip()} Prazo: {prazo} Link: {link}")
            else:
                resultados_com_prazos.append(resultado)  # Mantém a linha original se não tiver link

    return "\n".join(resultados_com_prazos)


import httpx  # Importe httpx
import re

def extrair_prazo_do_edital(link_edital: str) -> str:
    """
    Função auxiliar para extrair o prazo de inscrição da página do edital usando httpx.
    """
    try:
        with httpx.Client(follow_redirects=True, timeout=10.0) as client:  # Configurações do client
            response = client.get(link_edital)
            response.raise_for_status()  # Lança uma exceção para erros HTTP
        soup = BeautifulSoup(response.text, "html.parser")

        # Aqui você precisa INSPECIONAR O HTML das páginas dos editais
        # para encontrar os seletores CSS ou outros métodos para extrair o prazo.
        # Isso varia MUITO de site para site, então você precisará adaptar.
        # Exemplos (muito genéricos):
        prazo_element = soup.find("p", class_="prazo")  # Exemplo: <p class="prazo">Data: 10/10/2024</p>
        if prazo_element:
            return prazo_element.text.strip()
        prazo_element = soup.find("span", id="data-limite")  # Exemplo: <span id="data-limite">10/10/2024</span>
        if prazo_element:
            return prazo_element.text.strip()
        prazo_element = soup.find("div", string=re.compile(r"prazo", re.IGNORECASE)) # Procura <div> que contenha a palavra "prazo"
        if prazo_element:
            return prazo_element.find_next_sibling().text.strip() # Pega o texto do elemento seguinte

        return "Prazo não encontrado"

    except httpx.RequestError as e:
        return f"Erro ao acessar a página: {e}"
    except httpx.HTTPStatusError as e:
        return f"Erro HTTP: {e.response.status_code} - {e.response.text}"
    except Exception as e:
        return f"Erro ao extrair o prazo: {e}"

# Bloco 5: Agente de Filtragem por Causa
def agente_filtragem_causa(lista_editais: str, palavras_chave_osc: str, localizacao_osc: str):
    agente = Agent(
        name="agente_filtragem_causa",
        model="gemini-2.0-flash",
        instruction="""
        Você é um especialista em selecionar editais de financiamento para OSCs.
        Com base na lista de editais fornecida, nas palavras-chave que descrevem a causa
        ou área de atuação da OSC, e na localização da OSC, sua tarefa é filtrar a lista,
        mantendo apenas os editais que são relevantes para a OSC.

        Analise os títulos e descrições dos editais e compare-os com as palavras-chave da OSC.
        Além disso, verifique se a localização do edital (se especificada) é compatível com a
        localização da OSC. Se um edital for claramente destinado a outra região, exclua-o.

        Mantenha todas as informações relevantes sobre cada edital, incluindo título, organização financiadora,
        link e prazo de inscrição.

        Forneça uma justificativa concisa para cada edital excluído, explicando por que ele
        não é relevante para a OSC.
        """,
        # Não precisa do google_search aqui, pois já recebe a lista
    )

    mensagem_para_o_agente = (
        f"Lista de Editais: {lista_editais}\n"
        f"Palavras-chave da OSC: {palavras_chave_osc}\n"
        f"Localização da OSC: {localizacao_osc}\n"
        "Filtre a lista de editais, considerando a causa e a localização da OSC. Mantenha todas as informações dos editais."
    )

    editais_filtrados = call_agent(agente, mensagem_para_o_agente)
    return editais_filtrados

# Bloco 6: Agente de Priorização por Prazo e Resumo
def agente_priorizacao_prazo_resumo(lista_editais_filtrados: str):
    agente = Agent(
        name="agente_priorizacao_prazo_resumo",
        model="gemini-2.0-flash",
        instruction="""
        Você é um especialista em organizar e resumir editais de financiamento para OSCs.
        Com base na lista de editais filtrada, sua tarefa é:

        1.  Ordenar a lista por prazo de inscrição (do mais próximo ao mais distante), se os prazos estiverem disponíveis.
        2.  Gerar resumos concisos de cada edital, destacando:
            -   Objetivo do edital
            -   Público-alvo
            -   Áreas financiadas
            -   Valor do financiamento (se disponível)
        3.  **Incluir SEMPRE o link para o edital completo.**
        4.  Apresentar os resultados de forma clara e organizada.
        Se o prazo de inscrição não estiver disponível para um edital, inclua-o na lista,
        mas indique que o prazo não foi encontrado.
        """,
        tools=[],  # Não precisa do google_search aqui
    )

    mensagem_para_o_agente = (
        f"Lista de Editais Filtrados: {lista_editais_filtrados}\n"
        "Organize a lista por prazo (se disponível), gere os resumos e inclua os links para os editais. Mantenha todas as informações dos editais."
    )

    editais_organizados = call_agent(agente, mensagem_para_o_agente)
    return editais_organizados

# Bloco 7: Lógica Principal do Sistema
print("Iniciando o Sistema de Busca de Editais para OSCs")

# Obter a localização da OSC

localizacao_osc = input("Por favor, digite a LOCALIZAÇÃO da sua OSC (Estado, Região ou Cidade): ")

# Obter as palavras-chave da OSC
palavras_chave_osc = input(
    "Por favor, digite as PALAVRAS-CHAVE que descrevem a CAUSA ou ÁREA DE ATUAÇÃO da sua OSC (separadas por vírgula): "
)

# Executar os agentes
resultados_busca = agente_busca_regional(localizacao_osc)
print("\n--- Resultado do Agente 1 (Busca Regional) ---\n")
# Melhorando a formatação da saída
resultados_formatados = resultados_busca.replace("\n", "\n> ")  # Adiciona "> " no início de cada linha
display(to_markdown(resultados_formatados))
print("--- Fim do Agente 1 ---")

editais_filtrados = agente_filtragem_causa(resultados_busca, palavras_chave_osc, localizacao_osc) # Passando localizacao_osc
print("\n--- Resultado do Agente 2 (Filtragem por Causa) ---\n")
# Melhorando a formatação da saída
editais_filtrados_formatados = editais_filtrados.replace("\n", "\n> ")
display(to_markdown(editais_filtrados_formatados))
print("--- Fim do Agente 2 ---")

editais_organizados = agente_priorizacao_prazo_resumo(editais_filtrados)
print("\n--- Resultado do Agente 3 (Priorização e Resumo) ---\n")
# Melhorando a formatação da saída
editais_organizados_formatados = editais_organizados.replace("\n", "\n> ")
display(to_markdown(editais_organizados_formatados))
print("--- Fim do Agente 3 ---")

print("\n--- Fim do Sistema ---")